import cryptography
from tudor import *

data_str = "0x933f5f170099655f8efc3e1f0ade6ed251e7af25c4211db8076028ddfe14d7bc0960641a60000000000000000000000000000000000000000000000000000000000000000000000000e94efadab027128fda1b7f58b58e6743b0c77dfd49e4aafc3c677ffdf9fb5701000000000000000000000000000000000000000000000000000000000000000000000000000048003046022100cf71d824e49f86180fd3a7c5853c140432d175628927084d6f21fc12e41caccf0221008e15d09a6ec3c7d7e429d42f83b3a060ac52878a7da08fefa9d3195acffa52e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
data = bytes.fromhex(data_str[4:])

pubkey = sensor.pair.load_hs_key().public_key()
print("pubkey x:", hex(pubkey.public_numbers().x))
print("pubkey y:", hex(pubkey.public_numbers().y))

X = 142
import cryptography.hazmat.primitives.serialization as ser
import cryptography.hazmat.primitives.asymmetric.ec as ecc
import cryptography.hazmat.primitives.hashes as hashes

to_verify = data[:X]
signature = data[X + 2 : X + 2 + 0x46]
# signature = bytes(reversed(signature))

print("to_verify", to_verify.hex())
print("signature", signature.hex())

import hashlib

print("hash", hashlib.sha256(to_verify).hexdigest())


pubkey.verify(signature, to_verify, ecc.ECDSA(hashes.SHA256()))


# data2= "3f5f1700a5346702aa18c8550ca08572753ce6bd2c6d59f454fff8e5bad2532c69c646cc0000000000000000000000000000000000000000000000000000000000000000000000003b89fbe3ed72b4e699b8660f319fc7e253be421786d9b519e70b3ac37b7515500000000000000000000000000000000000000000000000000000000000000000000000000000"
